'''One approach to solving this problem with a time complexity of O(log(m+n)) is to use a divide-and-conquer algorithm, also known as binary search algorithm.

Here's an outline of the algorithm:

Determine the middle index of the shorter array nums1.
Use binary search to find the partition point in the longer array nums2.
Check if the partition point in the longer array is such that the combined left and right partitions of both arrays have an equal number of elements.
If the partition point is found, return the median from the combined left and right partitions.
If the partition point is not found, repeat the process by adjusting the middle index and partition point.
This solution has a time complexity of O(log(m+n)) because the algorithm divides the problem into smaller subproblems and solves them recursively, in logarithmic time.
The time complexity of this algorithm is O(log(min(m,n))), where m and n are the length of the input arrays.The space complexity of this algorithm is O(1) because we are not using any additional data structures, we are only using a few variables to store the pointers and indices, which have a constant size regardless of the size of the input arrays.'''

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        m, n = len(nums1), len(nums2)
        if m>n:
            nums1,nums2,m,n = nums2,nums1,n,m
        i_min, i_max, half_len = 0, m,(m+n+1)//2
        while i_min <= i_max:
            i=(i_min+i_max) // 2
            j = half_len - i
            if i<m and nums2[j-1] > nums1[i]:
                i_min = i+1
            elif i>0 and nums1[i-1] > nums2[j]:
                i_max=i-1
            else:
                if i==0: max_of_left = nums2[j-1]
                elif j==0: max_of_left = nums1[i-1]
                else: max_of_left = max(nums1[i-1],nums2[j-1])

                if (m+n) % 2 ==1:
                    return max_of_left
                if i == m: min_of_right = nums2[j]
                elif j == n: min_of_right = nums1[i]
                else: min_of_right = min(nums1[i],nums2[j])
                return (max_of_left+min_of_right)/2.0

'''Approach:
One approach to solving this problem is to use integer division and modulus operations to extract the digits of the input integer x in reverse order and then construct a new integer from these digits.

Here's an outline of the algorithm:

Initialize a variable res to store the reversed integer and a variable temp to store the input integer x.
Use a while loop to iterate through the digits of x starting from the least significant digit.
In each iteration, use the modulus operator to extract the last digit of the input integer and add it to the res variable.
Use the integer division operator to remove the last digit from the input integer.
Check if the result is out of 32-bit signed integer range [-2^31, 2^31 -1], if it is then return 0
Return the reversed integer.
The time complexity of this solution is O(log(n)) where n is the number of digits in the input integer x, and the space complexity is O(1) as we are only using a few variables.
'''
class Solution:
    def reverse(self, x: int) -> int:
        res = 0
        temp = x
        while temp != 0:
            res = res*10 + temp%10
            temp //= 10
        if res < -2**31 or res > 2**31-1:
            return 0
        return res

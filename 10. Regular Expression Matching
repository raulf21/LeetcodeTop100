'''This code uses dynamic programming to create a 2-dimensional boolean array dp, where dp[i][j] is True if the first i characters of s match the first j characters of p.

Initialize the 2-dimensional array dp with False, and set dp[0][0] = True as an empty string matches an empty pattern.
For the first row of dp, it checks for any '' in the pattern and sets the dp[0][i] = dp[0][i-2] if the '' is found in the pattern.
Then, it iterates over the string and the pattern using nested loops, starting from index 1.
If the current character in the string matches the current character in the pattern or the current character in the pattern is '.', then dp[i][j] = dp[i-1][j-1]
If the current character in the pattern is '*', it checks whether the preceding character in the pattern is '.' or matches the current character in the string. If so, then dp[i][j] = dp[i][j-2] or dp[i-1][j], otherwise dp[i][j] = dp[i][j-2]
Finally, it returns dp[rows][cols] which is the final match state for the entire string and pattern.
The time complexity of this solution is O(mn) where m is the length of the string s and n is the length of the pattern p. The space complexity is O(mn) as we are using a 2-dimensional array to store the match states'''




class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        rows, cols = len(s),len(p)
        if rows == 0 and cols == 0:
            return True
        if cols ==0:
            return False
        dp = [[False for i in range(cols+1)] for j in range(rows+1)]
        dp[0][0] = True
        print(dp)
        
        for i in range(2,cols+1):
            if p[i-1] == '*':
                dp[0][i] = dp[0][i-2]
        for i in range(1,rows+1):
            for j in range(1,cols+1):
                if s[i-1] == p[j-1] or p[j-1] == '.':
                    dp[i][j] = dp[i-1][j-1]
                elif j > 1 and p[j - 1] == '*':
                    dp[i][j] = dp[i][j - 2]
                    if p[j - 2] == '.' or p[j - 2] == s[i - 1]:
                        dp[i][j] = dp[i][j] or dp[i - 1][j]
        return dp[rows][cols]
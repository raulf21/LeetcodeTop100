'''
Approach:
Create a 2D boolean array dp of size (n x n), where n is the length of the input string s.
Initialize all elements in the first column and first row of the dp array to True, as single characters are always palindromes.
Iterate through the dp array starting at index (1,1) and fill in the rest of the array by checking if the substring from (i,j) to (i+1, j-1) is a palindrome and if the characters at index i and j are equal.
Use a variable max_length to keep track of the length of the longest palindrome substring found so far.
Iterate through the dp array and update max_length and the substring, if a palindrome of longer length is found.
Return the longest palindromic substring
This solution has a time complexity of O(n^2) and a space complexity of O(n^2) where n is the length of the input string.
'''

class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        max_length = 0
        start = 0
        for i in range(n):
            dp[i][i] = True
            max_length = 1
        for i in range(n-1):
            if s[i] == s[i+1]:
                dp[i][i+1] = True
                max_length = 2
                start = i
        for k in range(3, n+1):
            for i in range(n-k+1):
                j = i+k-1
                if dp[i+1][j-1] and s[i] == s[j]:
                    dp[i][j] = True
                    if k > max_length:
                        max_length = k
                        start = i
        return s[start:start+max_length]
